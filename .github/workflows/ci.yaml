name: CI
on:
  pull_request:
    branches: [develop, main]
  push:
    branches: [develop, main]

jobs:
  build:
    permissions: write-all
    runs-on: ubuntu-20.04
    env:
      SURGE_LOGIN: ${{secrets.SURGE_LOGIN}}
      SURGE_TOKEN: ${{secrets.SURGE_TOKEN}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-{{ hashFiles('**/package-lock.json')}}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Use NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: "19.x"

      - run: npm install

      - run: npm test -- --coverage
        env:
          CI: true

      - name: Upload Test Coverage
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage
          path: coverage

      - name: Build project
        # run only on push events
        if: github.event_name == 'push'
        run: npm run build

      - name: Upload Build folder
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: build

      - name: Semantic versioning
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: versioning
        uses: PaulHatch/semantic-version@v4.0.2
        with:
          branch: main
          # The prefix to use to identify tags
          tag_prefix: "v"
          major_pattern: "BREAKING CHANGE:"
          minor_pattern: "feat:"
          patch_pattern:
            "fix:"
            # A string to determine the format of the version output
          format: "v${major}.${minor}.${patch}"

      - name: Create Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        # if: "contains(github.event.head_commit.message, 'release')"
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN}}
        with:
          tag_name: ${{ steps.versioning.outputs.version }}
          release_name: ${{ steps.versioning.outputs.version }}

      - name: Deploy to Staging
        if:
          github.event_name == 'push'
          # && github.ref == 'refs/heads/develop'
          # install and run surge
        run: npx surge --project ./build --domain my-pipeline-ci-cd.surge.sh
        # run: npx surge --project ./build --domain production-my-pipeline-ci-cd.surge.sh

      # - name: Deploy to Production
      #   if:
      #     github.event_name == 'push' && github.ref == 'refs/heads/main'
      #     # install and run surge
      #   run: npx surge --project ./build --domain production-my-pipeline-ci-cd.surge.sh
